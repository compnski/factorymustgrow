{"version":3,"sources":["entities.ts","data.ts","logic.ts","Card.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Assembler","Name","Icon","StackSize","StorageUpgradeType","ResearchUpgradeItems","Miner","IronOre","CopperOre","CopperPlate","CopperWire","StoneFurnace","Stone","IronPlate","Gear","GreenChip","Recipies","DurationSeconds","ProducerType","Input","Output","Entity","Count","RecipiesByName","Map","map","r","GetRecipe","name","get","globalEntityCount","ec","e","entityStorageCapacity","es","checkAndConsumeEntities","stacks","ok","forEach","ensureSufficientEntitiesExists","withMutations","update","v","checkAndProduceEntities","ensureSufficientStorageExists","ProducerTypeUpgradeCost","type","_upgradeLevel","entities","entityCountReducer","state","action","producerName","producer","EntityProducers","console","log","recipe","RecipeName","EntityCounts","EntityStorageCapacityUpgrades","ep","ProducerCount","set","ProducerTypeIconMap","Smelter","ChemFactory","Refinery","Pumpjack","ProducerIcon","p","RecipeDisplay","className","x","i","Card","dispatch","rate","onClick","length","initialState","JSON","parse","localStorage","getItem","recipeName","ProducerCapacityUpgradeCount","ProducerMaxCapacityUpgradeCount","ResearchUpgradeCount","App","useReducer","entityCount","storageCapacity","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","k","setItem","stringify","toJSON","saveStateToLocalStorage","cards","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcc11f27.chunk.js","sourcesContent":["import { Entity, Recipe } from \"./types\";\n\nexport const Assembler: Entity = {\n  Name: \"Assembler\",\n  Icon: \"assembling-machine-1\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const YellowBelt: Entity = {\n  Name: \"Yellow Belt\",\n  Icon: \"transport-belt\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const Miner: Entity = {\n  Name: \"Miner\",\n  Icon: \"electric-mining-drill\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const IronOre: Entity = {\n  Name: \"Iron Ore\",\n  Icon: \"iron-ore\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const CopperOre: Entity = {\n  Name: \"Copper Ore\",\n  Icon: \"copper-ore\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const CopperPlate: Entity = {\n  Name: \"Copper Plate\",\n  Icon: \"copper-plate\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const CopperWire: Entity = {\n  Name: \"Copper Wire\",\n  Icon: \"copper-cable\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const StoneFurnace: Entity = {\n  Name: \"Stone Furnace\",\n  Icon: \"stone-furnace\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const Stone: Entity = {\n  Name: \"Stone\",\n  Icon: \"stone\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const IronPlate: Entity = {\n  Name: \"Iron Plate\",\n  Icon: \"iron-plate\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const IronChest: Entity = {\n  Name: \"Iron Chest\",\n  Icon: \"iron-chest\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const Gear: Entity = {\n  Name: \"Gear\",\n  Icon: \"iron-gear-wheel\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const GreenChip: Entity = {\n  Name: \"Green Chip\",\n  Icon: \"electronic-circuit\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const StoneRecipe: Recipe = {\n  Name: \"Stone\",\n  Icon: \"stone\",\n  DurationSeconds: 1,\n  ProducerType: \"Miner\",\n  Input: [],\n  Output: [\n    {\n      Entity: Stone,\n      Count: 1,\n    },\n  ],\n};\n\nexport const StoneFurnaceRecipe: Recipe = {\n  Name: \"Stone Furnace\",\n  Icon: \"stone-furnace\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: Stone,\n      Count: 5,\n    },\n  ],\n  Output: [\n    {\n      Entity: StoneFurnace,\n      Count: 1,\n    },\n  ],\n};\n\nexport const IronOreRecipe: Recipe = {\n  Name: \"Iron Ore\",\n  Icon: \"iron-ore\",\n  DurationSeconds: 1,\n  ProducerType: \"Miner\",\n  Input: [],\n  Output: [\n    {\n      Entity: IronOre,\n      Count: 1,\n    },\n  ],\n};\n\nexport const IronPlateRecipe: Recipe = {\n  Name: \"Iron Plate\",\n  Icon: \"iron-plate\",\n  DurationSeconds: 1,\n  ProducerType: \"Smelter\",\n  Input: [\n    {\n      Entity: IronOre,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: IronPlate,\n      Count: 1,\n    },\n  ],\n};\n\nexport const CopperOreRecipe: Recipe = {\n  Name: \"Copper Ore\",\n  Icon: \"copper-ore\",\n  DurationSeconds: 1,\n  ProducerType: \"Miner\",\n  Input: [],\n  Output: [\n    {\n      Entity: CopperOre,\n      Count: 1,\n    },\n  ],\n};\n\nexport const CopperPlateRecipe: Recipe = {\n  Name: \"Copper Plate\",\n  Icon: \"copper-plate\",\n  DurationSeconds: 1,\n  ProducerType: \"Smelter\",\n  Input: [\n    {\n      Entity: CopperOre,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: CopperPlate,\n      Count: 1,\n    },\n  ],\n};\n\nexport const GearRecipe: Recipe = {\n  Name: \"Gear\",\n  Icon: \"iron-gear-wheel\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 2,\n    },\n  ],\n  Output: [\n    {\n      Entity: Gear,\n      Count: 1,\n    },\n  ],\n};\n\nexport const IronChestRecipe: Recipe = {\n  Name: \"Iron Chest\",\n  Icon: \"iron-chest\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 8,\n    },\n  ],\n  Output: [\n    {\n      Entity: IronChest,\n      Count: 1,\n    },\n  ],\n};\n\nexport const CopperWireRecipe: Recipe = {\n  Name: \"Copper Wire\",\n  Icon: \"copper-cable\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: CopperPlate,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: CopperWire,\n      Count: 2,\n    },\n  ],\n};\n\nexport const GreenChipRecipe: Recipe = {\n  Name: \"Green Chip\",\n  Icon: \"electronic-circuit\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: CopperWire,\n      Count: 3,\n    },\n    {\n      Entity: IronPlate,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: GreenChip,\n      Count: 1,\n    },\n  ],\n};\n\nexport const MinerRecipe: Recipe = {\n  Name: \"Miner\",\n  Icon: \"electric-mining-drill\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 10,\n    },\n    {\n      Entity: Gear,\n      Count: 5,\n    },\n    {\n      Entity: GreenChip,\n      Count: 3,\n    },\n  ],\n  Output: [\n    {\n      Entity: Miner,\n      Count: 1,\n    },\n  ],\n};\n\nexport const AssemblerRecipe: Recipe = {\n  Name: \"Assembler\",\n  Icon: \"assembling-machine-1\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 9,\n    },\n    {\n      Entity: Gear,\n      Count: 5,\n    },\n    {\n      Entity: GreenChip,\n      Count: 3,\n    },\n  ],\n  Output: [\n    {\n      Entity: Assembler,\n      Count: 1,\n    },\n  ],\n};\n","import { Map } from \"immutable\";\nimport * as entities from \"./entities\";\nimport { Recipe } from \"./types\";\n\nexport const Recipies = [\n    entities.IronOreRecipe,\n    entities.CopperOreRecipe,\n    entities.StoneRecipe,\n    entities.StoneFurnaceRecipe,\n    entities.IronPlateRecipe,\n    entities.CopperPlateRecipe,\n    entities.CopperWireRecipe,\n    entities.GearRecipe,\n    entities.GreenChipRecipe,\n    entities.MinerRecipe,\n    entities.AssemblerRecipe,\n    entities.IronChestRecipe,\n];\n\nexport const RecipiesByName:Map<string, Recipe> = Map(Recipies.map((r)=>[r.Name, r]))\n\nexport function GetRecipe(name:string):Recipe {\n\tconst r = RecipiesByName.get(name)\n\tif (!r) throw(`Failed to find recipe ${name}`)\n\treturn r\n}\n","import { Map } from \"immutable\";\nimport * as entities from \"./entities\";\nimport { Entity, EntityStack, ProducingEntity, ProducerType } from \"./types\";\nimport {GetRecipe} from \"./data\"\n\n\nexport type Action = {\n  type:\n    | \"Produce\"\n    | \"AddProducer\"\n    | \"RemoveProducer\"\n    | \"AddProducerCapacity\"\n    | \"RemoveProducerCapacity\"\n  | \"UpgradeStorage\"\n    | \"UpgradeResearch\";\n  producerName: string;\n};\n\nexport type State = {\n  EntityCounts: Map<string, number>;\n  EntityStorageCapacityUpgrades: Map<string, number>;\n  EntityProducers: Map<string, ProducingEntity>;\n};\n\nexport const globalEntityCount = function (\n  ec: Map<string, number>,\n  e: Entity\n): number {\n  return ec.get(e.Name) || 0;\n};\n\nexport const entityStorageCapacity = function (\n  es: Map<string, number>,\n  e: Entity\n): number {\n  return e.StackSize * (1 + (es.get(e.Name) || 0));\n};\n\nconst ensureSufficientEntitiesExists = function (\n  ec: Map<string, number>,\n  stacks: EntityStack[]\n): boolean {\n  let ok = true;\n  stacks.forEach(({ Entity, Count }) => {\n    if (globalEntityCount(ec, Entity) < Count) ok = false;\n  });\n  return ok;\n};\n\nconst ensureSufficientStorageExists = function (\n  ec: Map<string, number>,\n  es: Map<string, number>,\n  stacks: EntityStack[]\n): boolean {\n  let ok = true;\n  stacks.forEach(({ Entity, Count }) => {\n    if (\n      globalEntityCount(ec, Entity) + Count >\n      entityStorageCapacity(es, Entity)\n    )\n      ok = false;\n  });\n  return ok;\n};\n\nconst checkAndConsumeEntities = function (\n  ec: Map<string, number>,\n  stacks: EntityStack[]\n): [Map<string, number>, boolean] {\n  if (!ensureSufficientEntitiesExists(ec, stacks)) return [ec, false];\n  const returnMap = ec.withMutations((ec: Map<string, number>) => {\n    stacks.forEach(({ Entity, Count }) => {\n      ec.update(Entity.Name, (v) => (v || 0) - Count);\n    });\n  });\n  return [returnMap, true];\n};\n\nconst checkAndProduceEntities = function (\n  ec: Map<string, number>,\n  es: Map<string, number>,\n  stacks: EntityStack[]\n): [Map<string, number>, boolean] {\n  if (!ensureSufficientStorageExists(ec, es, stacks)) return [ec, false];\n  const returnMap = ec.withMutations((ec: Map<string, number>) => {\n    stacks.forEach(({ Entity, Count }) => {\n      ec.update(Entity.Name, (v) => (v || 0) + Count);\n    });\n  });\n  return [returnMap, true];\n};\n\nexport const CurrentMaxProducerCount = function (p: ProducingEntity): number {\n  return 50;\n};\n\nexport function ProducerTypeUpgradeCost(\n  type: ProducerType,\n  _upgradeLevel: number\n): EntityStack[] {\n  switch (type) {\n    case \"Assembler\":\n      return [{ Entity: entities.Assembler, Count: 1 }];\n    case \"Smelter\":\n      return [{ Entity: entities.StoneFurnace, Count: 1 }];\n    case \"Miner\":\n      return [{ Entity: entities.Miner, Count: 1 }];\n    case \"ChemFactory\":\n      return [];\n    case \"Refinery\":\n      return [];\n    case \"Pumpjack\":\n      return [];\n  }\n}\n\nexport function ProducerTypeCapacityUpgradeCost(\n  type: ProducerType,\n  _upgradeLevel: number\n): EntityStack[] {\n  switch (type) {\n    case \"Assembler\":\n    case \"Smelter\":\n    case \"Miner\":\n      return [{ Entity: entities.YellowBelt, Count: 1 }];\n    case \"ChemFactory\":\n      return [];\n    case \"Refinery\":\n      return [];\n    case \"Pumpjack\":\n      return [];\n  }\n}\n\nexport function entityCountReducer(state: State, action: Action): State {\n  //console.log(\"Got \", action, \" for \", state);\n  const { type, producerName } = action;\n  const producer = state.EntityProducers.get(producerName);\n  if (!producer) {\n    console.log(`Cannot find producer with name ${producerName}`);\n    return state;\n  }\n  const recipe = GetRecipe(producer.RecipeName)\n  let ec = state.EntityCounts;\n  let es = state.EntityStorageCapacityUpgrades;\n  let ep = state.EntityProducers;\n  let ok: boolean;\n  switch (type) {\n    case \"Produce\":\n      [ec, ok] = checkAndConsumeEntities(ec, recipe.Input);\n      if (ok)\n        [ec, ok] = checkAndProduceEntities(ec, es, recipe.Output);\n      if (!ok) return state;\n      return {\n        ...state,\n        EntityCounts: ec,\n      };\n    case \"AddProducer\":\n      if (producer.ProducerCount > CurrentMaxProducerCount(producer))\n        return state;\n      [ec, ok] = checkAndConsumeEntities(\n        ec,\n        ProducerTypeUpgradeCost(\n          recipe.ProducerType,\n          producer.ProducerCount\n        )\n      );\n      if (!ok) return state;\n      ep = ep.set(producerName, {\n        ...producer,\n        ProducerCount: (producer.ProducerCount || 0) + 1,\n      });\n      return { ...state, EntityCounts: ec, EntityProducers: ep };\n    case \"RemoveProducer\":\n      if (producer.ProducerCount <= 0) return state;\n      [ec, ok] = checkAndProduceEntities(\n        ec,\n        es,\n        ProducerTypeUpgradeCost(\n          recipe.ProducerType,\n          producer.ProducerCount\n        )\n      );\n      if (!ok) return state;\n      ep = ep.set(producerName, {\n        ...producer,\n        ProducerCount: (producer.ProducerCount || 0) - 1,\n      });\n      return { ...state, EntityCounts: ec, EntityProducers: ep };\n    case \"UpgradeStorage\":\n    case \"AddProducerCapacity\":\n    case \"RemoveProducerCapacity\":\n    case \"UpgradeResearch\":\n    default:\n      return state;\n  }\n}\n","import { Entity, Recipe, ProducingEntity } from \"./types\";\nimport { Action, CurrentMaxProducerCount } from \"./logic\";\nimport { GetRecipe } from \"./data\";\n\n\nconst rateToTime = (rate: number): string => `${rate}/m`;\n\nconst CurrentProducerRate = (p: ProducingEntity): number =>\n    (1 / GetRecipe(p.RecipeName).DurationSeconds) * p.ProducerCount;\n\nconst ProducerTypeIconMap: { [key: string]: string } = {\n  Assembler: \"assembling-machine-1\",\n  Smelter: \"stone-furnace\",\n  Miner: \"electric-mining-drill\",\n  ChemFactory: \"\",\n  Refinery: \"\",\n  Pumpjack: \"\",\n};\n\nconst ProducerIcon = (p: ProducingEntity): string =>\n  ProducerTypeIconMap[GetRecipe(p.RecipeName).ProducerType];\n\ntype RecipeProps = {\n  recipe: Recipe;\n};\n\nconst RecipeDisplay = ({ recipe }: RecipeProps) => (\n  <div className=\"recipe\">\n    <span>Recipe: </span>\n    {recipe.Input.map((x, i) => (\n      <span key={i}>\n        <span>{x.Count}</span>\n        <div className={`icon ${x.Entity.Icon}`} />\n      </span>\n    ))}\n    <span>=</span>\n    {recipe.Output.map((x, i) => (\n      <span key={i}>\n        <span>{x.Count}</span>\n        <div className={`icon ${x.Entity.Icon}`} />\n      </span>\n    ))}\n  </div>\n);\n\nexport type CardProps = {\n  producer?: ProducingEntity;\n  dispatch(a: Action): void;\n  globalEntityCount: (e: Entity) => number;\n  entityStorageCapacity: (e: Entity) => number;\n};\n\nexport const Card = ({\n  producer,\n  dispatch,\n  globalEntityCount,\n  entityStorageCapacity,\n}: CardProps) => {\n    if (!producer) return <div className=\"NoProducer\" />;\n    const recipe = GetRecipe(producer.RecipeName)\n    return (\n        <div className=\"Producer\">\n            <div className=\"title\">\n                <span>{producer.RecipeName} </span>\n            </div>\n            <div className=\"infoRow\">\n                <div\n                    onClick={() => {\n                        dispatch({ producerName: producer.RecipeName, type: \"Produce\" });\n                    }}\n                    className={recipe.Icon + \" icon clickable\"}\n                />\n                <div className=\"rate\">{rateToTime(CurrentProducerRate(producer))}</div>\n                <div className=\"plusMinus\">\n                    <span\n                        onClick={() =>\n                            dispatch({\n                                producerName: producer.RecipeName,\n                                type: \"AddProducer\",\n                            })\n                        }\n                        className=\"clickable\"\n                    >\n                        +\n                    </span>\n                    <span\n                        onClick={() =>\n                            dispatch({\n                                producerName: producer.RecipeName,\n                                type: \"RemoveProducer\",\n                            })\n                        }\n                        className=\"clickable\"\n                    >\n                        -\n                    </span>\n                </div>\n                <span className={`icon producerTypeIcon ${ProducerIcon(producer)}`} />\n                <div className=\"producerCount\">\n                    <span className=\"currentCapacity\">{producer.ProducerCount}</span>\n                    <span>/</span>\n\n                    <span className=\"maxCapacity\">\n                        {CurrentMaxProducerCount(producer)}\n                    </span>\n                </div>\n                <div className=\"plusMinus maxCapacity\">\n                    <span\n                        onClick={() =>\n                            dispatch({\n                                producerName: producer.RecipeName,\n                                type: \"AddProducerCapacity\",\n                            })\n                        }\n                        className=\"clickable\"\n                    >\n                        +\n                    </span>\n                    <span\n                        onClick={() =>\n                            dispatch({\n                                producerName: producer.RecipeName,\n                                type: \"RemoveProducerCapacity\",\n                            })\n                        }\n                        className=\"clickable\"\n                    >\n                        -\n                    </span>\n                </div>\n                <div onClick={()=>dispatch({producerName: producer.RecipeName, type: \"UpgradeStorage\"})} className=\"icon iron-chest clickable\" />\n                <div className=\"filler\" />\n                <div className=\"icon space-science-pack clickable\" />\n            </div>\n            <div className=\"infoRow\">\n                <span className=\"count\">\n                    {globalEntityCount(recipe.Output[0].Entity)}/\n                    {entityStorageCapacity(recipe.Output[0].Entity)}\n                </span>\n                {recipe.Input.length > 0 ? (\n                    <RecipeDisplay recipe={recipe} />\n                ) : (\n                    <div />\n                )}\n            </div>\n        </div>\n    );\n};\n","import { useRef, useEffect, useReducer } from \"react\";\nimport \"./icons.scss\";\nimport \"./App.scss\";\nimport { Map } from \"immutable\";\nimport { Entity, ProducingEntity, Recipe } from \"./types\";\nimport {\n  State,\n  entityCountReducer,\n  globalEntityCount,\n  entityStorageCapacity,\n} from \"./logic\";\nimport { Recipies } from \"./data\";\n\nimport { Card } from \"./Card\";\n\nconst Producer = function (recipeName: string): ProducingEntity {\n  return {\n    RecipeName: recipeName,\n    ProducerCount: 0,\n    ProducerCapacityUpgradeCount: 0,\n    ProducerMaxCapacityUpgradeCount: 0,\n    ResearchUpgradeCount: 0,\n  };\n};\n\nfunction loadInitialStateFromLocalStorage(): State {\n  return {\n    EntityCounts: Map(\n      JSON.parse(localStorage.getItem(\"EntityCounts\") || \"false\") || {\n        Miner: 3,\n      }\n    ),\n    EntityStorageCapacityUpgrades: Map(\n      JSON.parse(localStorage.getItem(\"EntityStorageUpgrades\") || \"false\") || {}\n    ),\n    EntityProducers: Map(\n      JSON.parse(localStorage.getItem(\"EntityProducers\") || \"false\") ||\n        Recipies.map((r) => [r.Name, Producer(r.Name)])\n    ),\n  };\n}\n\nfunction saveStateToLocalStorage(state: State) {\n  localStorage.setItem(\n    \"EntityCounts\",\n    JSON.stringify(state.EntityCounts.toJSON())\n  );\n  localStorage.setItem(\n    \"EntityStorageUpgrades\",\n    JSON.stringify(state.EntityStorageCapacityUpgrades.toJSON())\n  );\n  localStorage.setItem(\n    \"EntityProducers\",\n    JSON.stringify(state.EntityProducers.toJSON())\n  );\n}\nconst initialState: State = loadInitialStateFromLocalStorage();\n\n/* Thanks Dan Abramov  for useInterval hook\n   https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current != null) savedCallback.current();\n    }\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(entityCountReducer, initialState);\n  const entityCount = (e: Entity): number =>\n    globalEntityCount(state.EntityCounts, e);\n  const storageCapacity = (e: Entity): number =>\n    entityStorageCapacity(state.EntityStorageCapacityUpgrades, e);\n  useInterval(() => {\n    // Your custom logic here\n    state.EntityProducers.forEach((p, k) => {\n      for (let i = 0; i < p.ProducerCount; i++) {\n        dispatch({ producerName: k, type: \"Produce\" });\n      }\n    });\n  }, 1000);\n  useEffect(() => {\n    saveStateToLocalStorage(state);\n  }, [state]);\n\n  let cards = Recipies.map((r) => (\n    <Card\n      key={r.Name}\n      producer={state.EntityProducers.get(r.Name)}\n      dispatch={dispatch}\n      globalEntityCount={entityCount}\n      entityStorageCapacity={storageCapacity}\n    />\n  ));\n\n  return (\n    <div className=\"App\">\n      {cards}\n      <a href=\"https://github.com/compnski/factorymustgrow\">Github</a>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}