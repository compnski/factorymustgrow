{"version":3,"sources":["entities.ts","logic.ts","Card.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Assembler","Name","Icon","StackSize","StorageUpgradeType","ResearchUpgradeItems","Miner","IronOre","CopperOre","CopperPlate","CopperWire","StoneFurnace","Stone","IronPlate","Gear","GreenChip","StoneRecipe","DurationSeconds","ProducerType","Input","Output","Entity","Count","StoneFurnaceRecipe","IronOreRecipe","IronPlateRecipe","CopperOreRecipe","CopperPlateRecipe","GearRecipe","CopperWireRecipe","GreenChipRecipe","MinerRecipe","AssemblerRecipe","globalEntityCount","ec","e","get","entityStorageCapacity","es","checkAndConsumeEntities","stacks","ok","forEach","ensureSufficientEntitiesExists","withMutations","update","v","checkAndProduceEntities","ensureSufficientStorageExists","ProducerTypeUpgradeCost","type","_upgradeLevel","entities","entityCountReducer","state","action","producerName","producer","EntityProducers","console","log","EntityCounts","EntityStorageCapacityUpgrades","ep","Recipe","ProducerCount","set","ProducerTypeIconMap","Smelter","ChemFactory","Refinery","Pumpjack","ProducerIcon","p","RecipeDisplay","recipe","className","map","x","i","Card","rate","dispatch","onClick","length","Producer","r","ProducerCapacityUpgradeCount","ProducerMaxCapacityUpgradeCount","ResearchUpgradeCount","Recipies","initialState","Map","App","useReducer","entityCount","storageCapacity","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","k","cards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fea59997.chunk.js","sourcesContent":["import { Entity, Recipe } from \"./types\";\n\nexport const Assembler: Entity = {\n  Name: \"Assembler\",\n  Icon: \"assembling-machine-1\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const YellowBelt: Entity = {\n  Name: \"Yellow Belt\",\n  Icon: \"transport-belt\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const Miner: Entity = {\n  Name: \"Miner\",\n  Icon: \"electric-mining-drill\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const IronOre: Entity = {\n  Name: \"Iron Ore\",\n  Icon: \"iron-ore\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const CopperOre: Entity = {\n  Name: \"Copper Ore\",\n  Icon: \"copper-ore\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const CopperPlate: Entity = {\n  Name: \"Copper Plate\",\n  Icon: \"copper-plate\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const CopperWire: Entity = {\n  Name: \"Copper Wire\",\n  Icon: \"copper-cable\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const StoneFurnace: Entity = {\n  Name: \"Stone Furnace\",\n  Icon: \"stone-furnace\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const Stone: Entity = {\n  Name: \"Stone\",\n  Icon: \"stone\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const IronPlate: Entity = {\n  Name: \"Iron Plate\",\n  Icon: \"iron-plate\",\n  StackSize: 50,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const Gear: Entity = {\n  Name: \"Gear\",\n  Icon: \"iron-gear-wheel\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const GreenChip: Entity = {\n  Name: \"Green Chip\",\n  Icon: \"electronic-circuit\",\n  StackSize: 100,\n  StorageUpgradeType: \"Solid\",\n  ResearchUpgradeItems: [],\n};\n\nexport const StoneRecipe: Recipe = {\n  Name: \"Stone\",\n  Icon: \"stone\",\n  DurationSeconds: 1,\n  ProducerType: \"Miner\",\n  Input: [],\n  Output: [\n    {\n      Entity: Stone,\n      Count: 1,\n    },\n  ],\n};\n\nexport const StoneFurnaceRecipe: Recipe = {\n  Name: \"Stone Furnace\",\n  Icon: \"stone-furnace\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: Stone,\n      Count: 5,\n    },\n  ],\n  Output: [\n    {\n      Entity: StoneFurnace,\n      Count: 1,\n    },\n  ],\n};\n\nexport const IronOreRecipe: Recipe = {\n  Name: \"Iron Ore\",\n  Icon: \"iron-ore\",\n  DurationSeconds: 1,\n  ProducerType: \"Miner\",\n  Input: [],\n  Output: [\n    {\n      Entity: IronOre,\n      Count: 1,\n    },\n  ],\n};\n\nexport const IronPlateRecipe: Recipe = {\n  Name: \"Iron Plate\",\n  Icon: \"iron-plate\",\n  DurationSeconds: 1,\n  ProducerType: \"Smelter\",\n  Input: [\n    {\n      Entity: IronOre,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: IronPlate,\n      Count: 1,\n    },\n  ],\n};\n\nexport const CopperOreRecipe: Recipe = {\n  Name: \"Copper Ore\",\n  Icon: \"copper-ore\",\n  DurationSeconds: 1,\n  ProducerType: \"Miner\",\n  Input: [],\n  Output: [\n    {\n      Entity: CopperOre,\n      Count: 1,\n    },\n  ],\n};\n\nexport const CopperPlateRecipe: Recipe = {\n  Name: \"Copper Plate\",\n  Icon: \"copper-plate\",\n  DurationSeconds: 1,\n  ProducerType: \"Smelter\",\n  Input: [\n    {\n      Entity: CopperOre,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: CopperPlate,\n      Count: 1,\n    },\n  ],\n};\n\nexport const GearRecipe: Recipe = {\n  Name: \"Gear\",\n  Icon: \"iron-gear-wheel\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 2,\n    },\n  ],\n  Output: [\n    {\n      Entity: Gear,\n      Count: 1,\n    },\n  ],\n};\n\nexport const CopperWireRecipe: Recipe = {\n  Name: \"Copper Wire\",\n  Icon: \"copper-cable\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: CopperPlate,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: CopperWire,\n      Count: 2,\n    },\n  ],\n};\n\nexport const GreenChipRecipe: Recipe = {\n  Name: \"Green Chip\",\n  Icon: \"electronic-circuit\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: CopperWire,\n      Count: 3,\n    },\n    {\n      Entity: IronPlate,\n      Count: 1,\n    },\n  ],\n  Output: [\n    {\n      Entity: GreenChip,\n      Count: 1,\n    },\n  ],\n};\n\nexport const MinerRecipe: Recipe = {\n  Name: \"Miner\",\n  Icon: \"electric-mining-drill\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 10,\n    },\n    {\n      Entity: Gear,\n      Count: 5,\n    },\n    {\n      Entity: GreenChip,\n      Count: 3,\n    },\n  ],\n  Output: [\n    {\n      Entity: Miner,\n      Count: 1,\n    },\n  ],\n};\n\nexport const AssemblerRecipe: Recipe = {\n  Name: \"Assembler\",\n  Icon: \"assembling-machine-1\",\n  DurationSeconds: 1,\n  ProducerType: \"Assembler\",\n  Input: [\n    {\n      Entity: IronPlate,\n      Count: 9,\n    },\n    {\n      Entity: Gear,\n      Count: 5,\n    },\n    {\n      Entity: GreenChip,\n      Count: 3,\n    },\n  ],\n  Output: [\n    {\n      Entity: Assembler,\n      Count: 1,\n    },\n  ],\n};\n","import { Map } from \"immutable\";\nimport * as entities from \"./entities\";\nimport { Entity, EntityStack, ProducingEntity, ProducerType } from \"./types\";\nexport type Action = {\n  type:\n    | \"Produce\"\n    | \"AddProducer\"\n    | \"RemoveProducer\"\n    | \"AddProducerCapacity\"\n    | \"RemoveProducerCapacity\"\n    | \"ResearchUpgrade\";\n  producerName: string;\n};\n\nexport type State = {\n  EntityCounts: Map<string, number>;\n  EntityStorageCapacityUpgrades: Map<string, number>;\n  EntityProducers: Map<string, ProducingEntity>;\n};\n\nexport const globalEntityCount = function (\n  ec: Map<string, number>,\n  e: Entity\n): number {\n  return ec.get(e.Name) || 0;\n};\n\nexport const entityStorageCapacity = function (\n  es: Map<string, number>,\n  e: Entity\n): number {\n  return e.StackSize * (1 + (es.get(e.Name) || 0));\n};\n\nconst ensureSufficientEntitiesExists = function (\n  ec: Map<string, number>,\n  stacks: EntityStack[]\n): boolean {\n  let ok = true;\n  stacks.forEach(({ Entity, Count }) => {\n    if (globalEntityCount(ec, Entity) < Count) ok = false;\n  });\n  return ok;\n};\n\nconst ensureSufficientStorageExists = function (\n  ec: Map<string, number>,\n  es: Map<string, number>,\n  stacks: EntityStack[]\n): boolean {\n  let ok = true;\n  stacks.forEach(({ Entity, Count }) => {\n    if (\n      globalEntityCount(ec, Entity) + Count >\n      entityStorageCapacity(es, Entity)\n    )\n      ok = false;\n  });\n  return ok;\n};\n\nconst checkAndConsumeEntities = function (\n  ec: Map<string, number>,\n  stacks: EntityStack[]\n): [Map<string, number>, boolean] {\n  if (!ensureSufficientEntitiesExists(ec, stacks)) return [ec, false];\n  const returnMap = ec.withMutations((ec: Map<string, number>) => {\n    stacks.forEach(({ Entity, Count }) => {\n      ec.update(Entity.Name, (v) => (v || 0) - Count);\n    });\n  });\n  return [returnMap, true];\n};\n\nconst checkAndProduceEntities = function (\n  ec: Map<string, number>,\n  es: Map<string, number>,\n  stacks: EntityStack[]\n): [Map<string, number>, boolean] {\n  if (!ensureSufficientStorageExists(ec, es, stacks)) return [ec, false];\n  const returnMap = ec.withMutations((ec: Map<string, number>) => {\n    stacks.forEach(({ Entity, Count }) => {\n      ec.update(Entity.Name, (v) => (v || 0) + Count);\n    });\n  });\n  return [returnMap, true];\n};\n\nexport const CurrentMaxProducerCount = function (p: ProducingEntity): number {\n  return 50;\n};\n\nexport function ProducerTypeUpgradeCost(\n  type: ProducerType,\n  _upgradeLevel: number\n): EntityStack[] {\n  switch (type) {\n    case \"Assembler\":\n      return [{ Entity: entities.Assembler, Count: 1 }];\n    case \"Smelter\":\n      return [{ Entity: entities.StoneFurnace, Count: 1 }];\n    case \"Miner\":\n      return [{ Entity: entities.Miner, Count: 1 }];\n    case \"ChemFactory\":\n      return [];\n    case \"Refinery\":\n      return [];\n    case \"Pumpjack\":\n      return [];\n  }\n}\n\nexport function ProducerTypeCapacityUpgradeCost(\n  type: ProducerType,\n  _upgradeLevel: number\n): EntityStack[] {\n  switch (type) {\n    case \"Assembler\":\n    case \"Smelter\":\n    case \"Miner\":\n      return [{ Entity: entities.YellowBelt, Count: 1 }];\n    case \"ChemFactory\":\n      return [];\n    case \"Refinery\":\n      return [];\n    case \"Pumpjack\":\n      return [];\n  }\n}\n\nexport function entityCountReducer(state: State, action: Action): State {\n  //console.log(\"Got \", action, \" for \", state);\n  const { type, producerName } = action;\n  const producer = state.EntityProducers.get(producerName);\n  if (!producer) {\n    console.log(`Cannot find producer with name ${producerName}`);\n    return state;\n  }\n  let ec = state.EntityCounts;\n  let es = state.EntityStorageCapacityUpgrades;\n  let ep = state.EntityProducers;\n  let ok: boolean;\n  switch (type) {\n    case \"Produce\":\n      [ec, ok] = checkAndConsumeEntities(ec, producer.Recipe.Input);\n      if (ok)\n        [ec, ok] = checkAndProduceEntities(ec, es, producer.Recipe.Output);\n      if (!ok) return state;\n      return {\n        ...state,\n        EntityCounts: ec,\n      };\n    case \"AddProducer\":\n      if (producer.ProducerCount > CurrentMaxProducerCount(producer))\n        return state;\n      [ec, ok] = checkAndConsumeEntities(\n        ec,\n        ProducerTypeUpgradeCost(\n          producer.Recipe.ProducerType,\n          producer.ProducerCount\n        )\n      );\n      if (!ok) return state;\n      ep = ep.set(producerName, {\n        ...producer,\n        ProducerCount: (producer.ProducerCount || 0) + 1,\n      });\n      return { ...state, EntityCounts: ec, EntityProducers: ep };\n    case \"RemoveProducer\":\n      if (producer.ProducerCount <= 0) return state;\n      [ec, ok] = checkAndProduceEntities(\n        ec,\n        es,\n        ProducerTypeUpgradeCost(\n          producer.Recipe.ProducerType,\n          producer.ProducerCount\n        )\n      );\n      if (!ok) return state;\n      ep = ep.set(producerName, {\n        ...producer,\n        ProducerCount: (producer.ProducerCount || 0) - 1,\n      });\n      return { ...state, EntityCounts: ec, EntityProducers: ep };\n    case \"AddProducerCapacity\":\n    case \"RemoveProducerCapacity\":\n    case \"ResearchUpgrade\":\n    default:\n      return state;\n  }\n}\n","import { Entity, Recipe, ProducingEntity } from \"./types\";\nimport { Action, CurrentMaxProducerCount } from \"./logic\";\n\nconst rateToTime = (rate: number): string => `${rate}/m`;\n\nconst CurrentProducerRate = (p: ProducingEntity): number =>\n  (1 / p.Recipe.DurationSeconds) * p.ProducerCount;\n\nconst ProducerTypeIconMap: { [key: string]: string } = {\n  Assembler: \"assembling-machine-1\",\n  Smelter: \"stone-furnace\",\n  Miner: \"electric-mining-drill\",\n  ChemFactory: \"\",\n  Refinery: \"\",\n  Pumpjack: \"\",\n};\n\nconst ProducerIcon = (p: ProducingEntity): string =>\n  ProducerTypeIconMap[p.Recipe.ProducerType];\n\ntype RecipeProps = {\n  recipe: Recipe;\n};\n\nconst RecipeDisplay = ({ recipe }: RecipeProps) => (\n  <div className=\"recipe\">\n    <span>Recipe: </span>\n    {recipe.Input.map((x, i) => (\n      <span key={i}>\n        <span>{x.Count}</span>\n        <div className={`icon ${x.Entity.Icon}`} />\n      </span>\n    ))}\n    <span>=</span>\n    {recipe.Output.map((x, i) => (\n      <span key={i}>\n        <span>{x.Count}</span>\n        <div className={`icon ${x.Entity.Icon}`} />\n      </span>\n    ))}\n  </div>\n);\n\nexport type CardProps = {\n  producer?: ProducingEntity;\n  dispatch(a: Action): void;\n  globalEntityCount: (e: Entity) => number;\n  entityStorageCapacity: (e: Entity) => number;\n};\n\nexport const Card = ({\n  producer,\n  dispatch,\n  globalEntityCount,\n  entityStorageCapacity,\n}: CardProps) => {\n  if (!producer) return <div className=\"NoProducer\" />;\n  return (\n    <div className=\"Producer\">\n      <div className=\"title\">\n        <span>{producer.Recipe.Name} </span>\n      </div>\n      <div className=\"infoRow\">\n        <div\n          onClick={() => {\n            dispatch({ producerName: producer.Recipe.Name, type: \"Produce\" });\n          }}\n          className={producer.Recipe.Icon + \" icon clickable\"}\n        />\n        <div className=\"rate\">{rateToTime(CurrentProducerRate(producer))}</div>\n        <div className=\"plusMinus\">\n          <span\n            onClick={() =>\n              dispatch({\n                producerName: producer.Recipe.Name,\n                type: \"AddProducer\",\n              })\n            }\n            className=\"clickable\"\n          >\n            +\n          </span>\n          <span\n            onClick={() =>\n              dispatch({\n                producerName: producer.Recipe.Name,\n                type: \"RemoveProducer\",\n              })\n            }\n            className=\"clickable\"\n          >\n            -\n          </span>\n        </div>\n        <span className={`icon producerTypeIcon ${ProducerIcon(producer)}`} />\n        <div className=\"producerCount\">\n          <span className=\"currentCapacity\">{producer.ProducerCount}</span>\n          <span>/</span>\n\n          <span className=\"maxCapacity\">\n            {CurrentMaxProducerCount(producer)}\n          </span>\n        </div>\n        <div className=\"plusMinus maxCapacity\">\n          <span\n            onClick={() =>\n              dispatch({\n                producerName: producer.Recipe.Name,\n                type: \"AddProducerCapacity\",\n              })\n            }\n            className=\"clickable\"\n          >\n            +\n          </span>\n          <span\n            onClick={() =>\n              dispatch({\n                producerName: producer.Recipe.Name,\n                type: \"RemoveProducerCapacity\",\n              })\n            }\n            className=\"clickable\"\n          >\n            -\n          </span>\n        </div>\n        <div className=\"filler\" />\n        <div className=\"icon space-science-pack clickable\" />\n      </div>\n      <div className=\"infoRow\">\n        <span className=\"count\">\n          {globalEntityCount(producer.Recipe.Output[0].Entity)}/\n          {entityStorageCapacity(producer.Recipe.Output[0].Entity)}\n        </span>\n        {producer.Recipe.Input.length > 0 ? (\n          <RecipeDisplay recipe={producer.Recipe} />\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useRef, useEffect, useReducer } from \"react\";\nimport \"./icons.scss\";\nimport \"./App.scss\";\nimport { Map } from \"immutable\";\nimport { Entity, ProducingEntity, Recipe } from \"./types\";\nimport {\n  State,\n  entityCountReducer,\n  globalEntityCount,\n  entityStorageCapacity,\n} from \"./logic\";\nimport * as entities from \"./entities\";\n\nimport { Card } from \"./Card\";\n\nconst Producer = function (r: Recipe): ProducingEntity {\n  return {\n    Recipe: r,\n    ProducerCount: 0,\n    ProducerCapacityUpgradeCount: 0,\n    ProducerMaxCapacityUpgradeCount: 0,\n    ResearchUpgradeCount: 0,\n  };\n};\n\nconst Recipies = [\n  entities.IronOreRecipe,\n  entities.CopperOreRecipe,\n  entities.StoneRecipe,\n  entities.StoneFurnaceRecipe,\n  entities.IronPlateRecipe,\n  entities.CopperPlateRecipe,\n  entities.CopperWireRecipe,\n  entities.GearRecipe,\n  entities.GreenChipRecipe,\n  entities.MinerRecipe,\n  entities.AssemblerRecipe,\n];\n\nconst initialState: State = {\n  EntityCounts: Map({ Miner: 3 }),\n  EntityStorageCapacityUpgrades: Map(),\n  EntityProducers: Map(Recipies.map((r) => [r.Name, Producer(r)])),\n};\n\n/* Thanks Dan Abramov  for useInterval hook\n   https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current != null) savedCallback.current();\n    }\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(entityCountReducer, initialState);\n  const entityCount = (e: Entity): number =>\n    globalEntityCount(state.EntityCounts, e);\n  const storageCapacity = (e: Entity): number =>\n    entityStorageCapacity(state.EntityStorageCapacityUpgrades, e);\n  useInterval(() => {\n    // Your custom logic here\n    state.EntityProducers.forEach((p, k) => {\n      for (let i = 0; i < p.ProducerCount; i++) {\n        dispatch({ producerName: k, type: \"Produce\" });\n      }\n    });\n  }, 1000);\n\n  let cards = Recipies.map((r) => (\n    <Card\n      key={r.Name}\n      producer={state.EntityProducers.get(r.Name)}\n      dispatch={dispatch}\n      globalEntityCount={entityCount}\n      entityStorageCapacity={storageCapacity}\n    />\n  ));\n\n  return <div className=\"App\">{cards}</div>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}